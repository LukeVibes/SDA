package edu.carleton.comp4601.resources;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.UriInfo;

import edu.carleton.comp4601.dao.DocumentCollection;

public class SearchTagAction {
	//Default stuff we assume we need...
		@Context
		UriInfo uriInfo;
		@Context
		Request request;
		
		String rawTags;
		List<String> organizedTags;
		String action;
		DocumentCollection documents;
		
	//Constructor
	public SearchTagAction(UriInfo uriInfo, Request request) {
		this.uriInfo = uriInfo;
		this.request = request;
	}
	
	//Cleans tags into list of tags
	@GET
	@Path("{tags}")
	@Produces(MediaType.APPLICATION_JSON)
	public String search(@PathParam("tags") String rawtags){
		
		filter(rawtags);
		
		return 
	}
	
	public String filter(String rawtags){
		String json_docs;
		//Step one: search threw document 
			List<edu.carleton.comp4601.dao.Document> docs = documents.getDocuments();
			for(int i=0; i<docs.size(); i++){
				edu.carleton.comp4601.dao.Document docAti = docs.get(i);
		
		//Step two: compare each document to see if it has ANY of the tags
				boolean isSubset = docs.containsAll(tags);
				
			}
		
		//Step three: Append documents we want to JSON string 
		
		return json_docs;
	}
	
	
	
	

}
